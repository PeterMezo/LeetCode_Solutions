# Problem

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 
Follow up: Can you come up with an algorithm that runs in O(m + n) time?



# Approach
Using three pointers (pn1 for nums1, pn2 for nums2, pn3 for the joint length of nums1 + nums2). Compare the last values of each array using the pointers,
place the higher to the end of the nums1 array. Decrease the pointer of the array from which an item was used. In case a pointer reaches the end of an array,
fill up the rest of the nums1 array from the array with the pointer that points to a valid element.

# Complexity
- Time complexity: O(M +N)

- Space complexity: O(1)


# Code

/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */

var merge = function(nums1, m, nums2, n) {
    let pn1 = m-1;
    let pn2 = n-1;
    let pn3 = Math.floor((m+n)-1);
    let temp;

    for (let i = pn3; i>-1; i--){

    console.log('p1 ',pn1)
    console.log('p2 ', pn2) 

    //2nd case:
    if(pn1 < 0 && pn2 > -1) {
        nums1[i] = nums2[pn2]
        pn2--
    } 

    //3rd case:
    if(pn2 < 0 && pn1 > -1) {
        nums1[i] = nums1[pn1]
        pn1--
    }

    //1st case:
    if (pn1 > -1 && pn2 > -1){
        if (nums1[pn1] > nums2[pn2]){
            nums1[i] = nums1[pn1]
            pn1--
        } else {
            nums1[i] = nums2[pn2]
            pn2--
        }
    }
    }
    
};
```
